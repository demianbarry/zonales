package org.hrtsim.dfltmodelview.impl;

import ca.odell.glazedlists.BasicEventList;
import ca.odell.glazedlists.EventList;
import ca.odell.glazedlists.SortedList;
import ca.odell.glazedlists.gui.TableFormat;
import ca.odell.glazedlists.swing.EventTableModel;
import java.util.Comparator;
import java.util.logging.Logger;
import org.hrtsim.basemodel.api.BaseModel;
import org.hrtsim.rttaskdef.PeriodicTaskDef;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.util.Lookup;
import org.openide.windows.CloneableTopComponent;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//org.hrtsim.dfltmodelview.impl//DfltModelView//EN",
autostore = false)
//public final class DfltModelViewTopComponent extends TopComponent {
public final class DfltModelViewTopComponent extends CloneableTopComponent {

    private static DfltModelViewTopComponent instance;
    /** path to the icon used by the component and its open action */
//    static final String ICON_PATH = "SET/PATH/TO/ICON/HERE";
    private static final String PREFERRED_ID = "DfltModelViewTopComponent";

    public DfltModelViewTopComponent() {
        BaseModel baseModel = Lookup.getDefault().lookup(BaseModel.class);
        EventList<PeriodicTaskDef> tasksDefs = new BasicEventList<PeriodicTaskDef>();
        tasksDefs.addAll(baseModel.getRtsSystem().getPeriodicTaskDefs());
        SortedList<PeriodicTaskDef> sortedTaskDefs = new SortedList<PeriodicTaskDef>(tasksDefs, new TaskDefComparator());
        this.taskDefTableModel = new EventTableModel<PeriodicTaskDef>(tasksDefs, new TaskDefTableFormat());
        System.out.println(taskDefTableModel);

        initComponents();
        setName(NbBundle.getMessage(DfltModelViewTopComponent.class, "CTL_DfltModelViewTopComponent"));
        setToolTipText(NbBundle.getMessage(DfltModelViewTopComponent.class, "HINT_DfltModelViewTopComponent"));
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jComboBox1 = new javax.swing.JComboBox();

        jTable1.setModel(taskDefTableModel);
        jScrollPane1.setViewportView(jTable1);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(DfltModelViewTopComponent.class, "DfltModelViewTopComponent.jLabel1.text")); // NOI18N

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable2);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(DfltModelViewTopComponent.class, "DfltModelViewTopComponent.jLabel2.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(DfltModelViewTopComponent.class, "DfltModelViewTopComponent.jLabel3.text")); // NOI18N

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 916, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jScrollPane1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, 0, 188, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(245, 245, 245))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jScrollPane1, jScrollPane2});

    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    // End of variables declaration//GEN-END:variables
    /**
     * Gets default instance. Do not use directly: reserved for *.settings files only,
     * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
     * To obtain the singleton instance, use {@link #findInstance}.
     */
    public static synchronized DfltModelViewTopComponent getDefault() {
        if (instance == null) {
            instance = new DfltModelViewTopComponent();
        }
        return instance;
    }

    /**
     * Obtain the DfltModelViewTopComponent instance. Never call {@link #getDefault} directly!
     */
    public static synchronized DfltModelViewTopComponent findInstance() {
        TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
        if (win == null) {
            Logger.getLogger(DfltModelViewTopComponent.class.getName()).warning(
                    "Cannot find " + PREFERRED_ID + " component. It will not be located properly in the window system.");
            return getDefault();
        }
        if (win instanceof DfltModelViewTopComponent) {
            return (DfltModelViewTopComponent) win;
        }
        Logger.getLogger(DfltModelViewTopComponent.class.getName()).warning(
                "There seem to be multiple components with the '" + PREFERRED_ID
                + "' ID. That is a potential source of errors and unexpected behavior.");
        return getDefault();
    }

    @Override
    public int getPersistenceType() {
        return TopComponent.PERSISTENCE_ALWAYS;
    }

    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    Object readProperties(java.util.Properties p) {
        if (instance == null) {
            instance = this;
        }
        instance.readPropertiesImpl(p);
        return instance;
    }

    private void readPropertiesImpl(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    protected String preferredID() {
        return PREFERRED_ID;
    }

    private EventTableModel<PeriodicTaskDef> taskDefTableModel;
    public void setTaskDefTableModel(EventTableModel<PeriodicTaskDef> taskDefTableModel) {
        this.taskDefTableModel = taskDefTableModel;
    }

    public class TaskDefComparator implements Comparator<PeriodicTaskDef> {

        public int compare(PeriodicTaskDef o1, PeriodicTaskDef o2) {
            // periodos
            double p1 = o1.getPeriod();
            double p2 = o2.getPeriod();
            // ids
            int id1 = o1.getId();
            int id2 = o2.getId();

            if (p1 < p2) {
                return -1;
            } else if (p1 > p2) {
                return 1;
            }
            if (id1 < id2) {
                return -1;
            } else if (id1 > id2) {
                return 1;
            }
            return 0;
        }
    }

    public class TaskDefTableFormat implements TableFormat<PeriodicTaskDef> {

        public int getColumnCount() {
            return 5;
        }

        public String getColumnName(int column) {
            if (column == 0) {
                return "ID";
            } else if (column == 1) {
                return "C";
            } else if (column == 2) {
                return "T";
            } else if (column == 3) {
                return "D";
            } else if (column == 4) {
                return "Slack";
            }

            throw new IllegalStateException();
        }

        public Object getColumnValue(PeriodicTaskDef task, int column) {

            if (column == 0) {
                return task.getId();
            } else if (column == 1) {
                return task.getRuntime();
            } else if (column == 2) {
                return task.getPeriod();
            } else if (column == 3) {
                return task.getDeadline();
            } else if (column == 4) {
                return 1;
            }

            throw new IllegalStateException();
        }
    }
}